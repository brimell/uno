{"version":3,"sources":["assets/cards-front sync /^/.//.*/.png$","assets/logo.png","assets/card-back.png","assets/cards-front/0B.png","assets/cards-front/0G.png","assets/cards-front/0R.png","assets/cards-front/0Y.png","assets/cards-front/1B.png","assets/cards-front/1G.png","assets/cards-front/1R.png","assets/cards-front/1Y.png","assets/cards-front/2B.png","assets/cards-front/2G.png","assets/cards-front/2R.png","assets/cards-front/2Y.png","assets/cards-front/3B.png","assets/cards-front/3G.png","assets/cards-front/3R.png","assets/cards-front/3Y.png","assets/cards-front/4B.png","assets/cards-front/4G.png","assets/cards-front/4R.png","assets/cards-front/4Y.png","assets/cards-front/5B.png","assets/cards-front/5G.png","assets/cards-front/5R.png","assets/cards-front/5Y.png","assets/cards-front/6B.png","assets/cards-front/6G.png","assets/cards-front/6R.png","assets/cards-front/6Y.png","assets/cards-front/7B.png","assets/cards-front/7G.png","assets/cards-front/7R.png","assets/cards-front/7Y.png","assets/cards-front/8B.png","assets/cards-front/8G.png","assets/cards-front/8R.png","assets/cards-front/8Y.png","assets/cards-front/9B.png","assets/cards-front/9G.png","assets/cards-front/9R.png","assets/cards-front/9Y.png","assets/cards-front/D2B.png","assets/cards-front/D2G.png","assets/cards-front/D2R.png","assets/cards-front/D2Y.png","assets/cards-front/D4W.png","assets/cards-front/W.png","assets/cards-front/_B.png","assets/cards-front/_G.png","assets/cards-front/_R.png","assets/cards-front/_Y.png","assets/cards-front/skipB.png","assets/cards-front/skipG.png","assets/cards-front/skipR.png","assets/cards-front/skipY.png","utils/randomCodeGenerator.js","components/Homepage.js","utils/packOfCards.js","components/Game.js","components/Spinner.js","assets/sounds/game-bg-music.mp3","assets/sounds/uno-sound.mp3","assets/sounds/shuffling-cards-1.mp3","assets/sounds/skip-sound.mp3","assets/sounds/draw2-sound.mp3","assets/sounds/wild-sound.mp3","assets/sounds/draw4-sound.mp3","assets/sounds/game-over-sound.mp3","utils/shuffleArray.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","Homepage","useState","roomCode","setRoomCode","className","src","require","default","alt","width","Input","placeholder","onChange","event","target","value","Button","onClick","window","href","alert","variant","to","randomCodeGenerator","socket","Spinner","Game","props","data","queryString","parse","location","search","room","roomFull","setRoomFull","users","setUsers","currentUser","setCurrentUser","message","setMessage","messages","setMessages","useEffect","io","connect","emit","error","off","gameOver","setGameOver","winner","setWinner","turn","setTurn","player1Deck","setPlayer1Deck","player2Deck","setPlayer2Deck","currentColor","setCurrentColor","currentNumber","setCurrentNumber","playedCardsPile","setPlayedCardsPile","drawCardPile","setDrawCardPile","isChatBoxHidden","setChatBoxHidden","isUnoButtonPressed","setUnoButtonPressed","isSoundMuted","setSoundMuted","isMusicMuted","setMusicMuted","useSound","bgMusic","loop","playBBgMusic","pause","unoSound","playUnoSound","shufflingSound","playShufflingSound","skipCardSound","playSkipCardSound","draw2CardSound","playDraw2CardSound","wildCardSound","playWildCardSound","draw4CardSound","playDraw4CardSound","gameOverSound","playGameOverSound","startingCardIndex","shuffledCards","array","j","temp","shuffleArray","PACK_OF_CARDS","splice","on","name","chatBody","document","querySelector","scrollTop","scrollHeight","checkGameOver","arr","checkWinner","player","toggleChatBox","style","display","sendMessage","preventDefault","onCardPlayedHandler","played_card","cardPlayedBy","numberOfPlayedCard","colorOfPlayedCard","console","log","removeIndex","indexOf","slice","copiedDrawCardPileArray","drawCard1","pop","drawCard2","updatedPlayer1Deck","push","updatedPlayer2Deck","drawCard1X","drawCard2X","newColor","prompt","toUpperCase","drawCard3","drawCard4","onCardDrawnHandler","drawCard","colorOfDrawnCard","numberOfDrawnCard","pointerEvents","item","disabled","class","msg","user","text","type","onKeyPress","key","App","path","exact","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fb8dee91.chunk.js","sourcesContent":["var map = {\n\t\"./0B.png\": 135,\n\t\"./0G.png\": 136,\n\t\"./0R.png\": 137,\n\t\"./0Y.png\": 138,\n\t\"./1B.png\": 139,\n\t\"./1G.png\": 140,\n\t\"./1R.png\": 141,\n\t\"./1Y.png\": 142,\n\t\"./2B.png\": 143,\n\t\"./2G.png\": 144,\n\t\"./2R.png\": 145,\n\t\"./2Y.png\": 146,\n\t\"./3B.png\": 147,\n\t\"./3G.png\": 148,\n\t\"./3R.png\": 149,\n\t\"./3Y.png\": 150,\n\t\"./4B.png\": 151,\n\t\"./4G.png\": 152,\n\t\"./4R.png\": 153,\n\t\"./4Y.png\": 154,\n\t\"./5B.png\": 155,\n\t\"./5G.png\": 156,\n\t\"./5R.png\": 157,\n\t\"./5Y.png\": 158,\n\t\"./6B.png\": 159,\n\t\"./6G.png\": 160,\n\t\"./6R.png\": 161,\n\t\"./6Y.png\": 162,\n\t\"./7B.png\": 163,\n\t\"./7G.png\": 164,\n\t\"./7R.png\": 165,\n\t\"./7Y.png\": 166,\n\t\"./8B.png\": 167,\n\t\"./8G.png\": 168,\n\t\"./8R.png\": 169,\n\t\"./8Y.png\": 170,\n\t\"./9B.png\": 171,\n\t\"./9G.png\": 172,\n\t\"./9R.png\": 173,\n\t\"./9Y.png\": 174,\n\t\"./D2B.png\": 175,\n\t\"./D2G.png\": 176,\n\t\"./D2R.png\": 177,\n\t\"./D2Y.png\": 178,\n\t\"./D4W.png\": 179,\n\t\"./W.png\": 180,\n\t\"./_B.png\": 181,\n\t\"./_G.png\": 182,\n\t\"./_R.png\": 183,\n\t\"./_Y.png\": 184,\n\t\"./skipB.png\": 185,\n\t\"./skipG.png\": 186,\n\t\"./skipR.png\": 187,\n\t\"./skipY.png\": 188\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 45;","export default __webpack_public_path__ + \"static/media/logo.2d1c62d5.png\";","export default __webpack_public_path__ + \"static/media/card-back.ee67de74.png\";","export default __webpack_public_path__ + \"static/media/0B.4a5eb6bf.png\";","export default __webpack_public_path__ + \"static/media/0G.87d131c4.png\";","export default __webpack_public_path__ + \"static/media/0R.17fec01d.png\";","export default __webpack_public_path__ + \"static/media/0Y.dbfd6ac8.png\";","export default __webpack_public_path__ + \"static/media/1B.d1916ca9.png\";","export default __webpack_public_path__ + \"static/media/1G.0fb8729c.png\";","export default __webpack_public_path__ + \"static/media/1R.49ed3f72.png\";","export default __webpack_public_path__ + \"static/media/1Y.4881d6f5.png\";","export default __webpack_public_path__ + \"static/media/2B.b30c34c7.png\";","export default __webpack_public_path__ + \"static/media/2G.9f1043d9.png\";","export default __webpack_public_path__ + \"static/media/2R.b5523c9e.png\";","export default __webpack_public_path__ + \"static/media/2Y.7a49720f.png\";","export default __webpack_public_path__ + \"static/media/3B.55554e09.png\";","export default __webpack_public_path__ + \"static/media/3G.d12b188c.png\";","export default __webpack_public_path__ + \"static/media/3R.01e98a85.png\";","export default __webpack_public_path__ + \"static/media/3Y.60a855f1.png\";","export default __webpack_public_path__ + \"static/media/4B.9f863da2.png\";","export default __webpack_public_path__ + \"static/media/4G.e7f0c39e.png\";","export default __webpack_public_path__ + \"static/media/4R.d4b55dbd.png\";","export default __webpack_public_path__ + \"static/media/4Y.ae547a47.png\";","export default __webpack_public_path__ + \"static/media/5B.7da3f78c.png\";","export default __webpack_public_path__ + \"static/media/5G.5f629ef3.png\";","export default __webpack_public_path__ + \"static/media/5R.1cdf87eb.png\";","export default __webpack_public_path__ + \"static/media/5Y.8dfd1d59.png\";","export default __webpack_public_path__ + \"static/media/6B.3ae6979e.png\";","export default __webpack_public_path__ + \"static/media/6G.f7ec1912.png\";","export default __webpack_public_path__ + \"static/media/6R.ddda836b.png\";","export default __webpack_public_path__ + \"static/media/6Y.7ad7c4b5.png\";","export default __webpack_public_path__ + \"static/media/7B.61517841.png\";","export default __webpack_public_path__ + \"static/media/7G.4a277a6d.png\";","export default __webpack_public_path__ + \"static/media/7R.d9082455.png\";","export default __webpack_public_path__ + \"static/media/7Y.6eafca54.png\";","export default __webpack_public_path__ + \"static/media/8B.30db8e3e.png\";","export default __webpack_public_path__ + \"static/media/8G.b0f18f92.png\";","export default __webpack_public_path__ + \"static/media/8R.296eb053.png\";","export default __webpack_public_path__ + \"static/media/8Y.cefea39b.png\";","export default __webpack_public_path__ + \"static/media/9B.e252ce18.png\";","export default __webpack_public_path__ + \"static/media/9G.82ff5a0b.png\";","export default __webpack_public_path__ + \"static/media/9R.616afbce.png\";","export default __webpack_public_path__ + \"static/media/9Y.fc2b075e.png\";","export default __webpack_public_path__ + \"static/media/D2B.a1e36402.png\";","export default __webpack_public_path__ + \"static/media/D2G.cc357b81.png\";","export default __webpack_public_path__ + \"static/media/D2R.45d93f92.png\";","export default __webpack_public_path__ + \"static/media/D2Y.3b7c7812.png\";","export default __webpack_public_path__ + \"static/media/D4W.8ab81810.png\";","export default __webpack_public_path__ + \"static/media/W.d932cc55.png\";","export default __webpack_public_path__ + \"static/media/_B.95aa59aa.png\";","export default __webpack_public_path__ + \"static/media/_G.d9435180.png\";","export default __webpack_public_path__ + \"static/media/_R.95d0dbdf.png\";","export default __webpack_public_path__ + \"static/media/_Y.43a5d6f0.png\";","export default __webpack_public_path__ + \"static/media/skipB.f083b8d7.png\";","export default __webpack_public_path__ + \"static/media/skipG.d0dc1da2.png\";","export default __webpack_public_path__ + \"static/media/skipR.80b52ed1.png\";","export default __webpack_public_path__ + \"static/media/skipY.1355a1fb.png\";","export default function makeid(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport Button from '@mui/material/Button';\nimport Input from '@mui/material/Input';\n\nimport randomCodeGenerator from '../utils/randomCodeGenerator'\n\nconst Homepage = () => {\n    const [roomCode, setRoomCode] = useState('')\n\n    return (\n        <div className='Homepage'>\n            <div className='homepage-menu'>\n                <img src={require('../assets/logo.png').default} alt='' width='200px' />\n                <div className='homepage-form'>\n                    <div className='homepage-join'>\n                        <Input placeholder='Game Code' onChange={(event) => setRoomCode(event.target.value)} className=\"input\" />\n                        <Button onClick={() => {\n                            if (roomCode) {\n                                window.href = `/play?roomCode=${roomCode}`\n                            } else {\n                                alert('Please enter a game code')\n                            }\n                        }} variant=\"contained\" className=\"btn\">Join Game</Button>\n                    </div>\n                    <h1>OR</h1>\n                    <div className='homepage-create'>\n                        <Link to={`/play?roomCode=${randomCodeGenerator(5)}`}><Button variant=\"contained\" className=\"btn\">Create Game</Button></Link>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Homepage\n","/* eslint-disable import/no-anonymous-default-export */\n//pack of 108 cards (_ = reverse)\nexport default [\n    '0R', '1R', '1R', '2R', '2R', '3R', '3R', '4R', '4R', '5R', '5R', '6R', '6R', '7R', '7R', '8R', '8R', '9R', '9R', 'skipR', 'skipR', '_R', '_R', 'D2R', 'D2R',\n    '0G', '1G', '1G', '2G', '2G', '3G', '3G', '4G', '4G', '5G', '5G', '6G', '6G', '7G', '7G', '8G', '8G', '9G', '9G', 'skipG', 'skipG', '_G', '_G', 'D2G', 'D2G',\n    '0B', '1B', '1B', '2B', '2B', '3B', '3B', '4B', '4B', '5B', '5B', '6B', '6B', '7B', '7B', '8B', '8B', '9B', '9B', 'skipB', 'skipB', '_B', '_B', 'D2B', 'D2B',\n    '0Y', '1Y', '1Y', '2Y', '2Y', '3Y', '3Y', '4Y', '4Y', '5Y', '5Y', '6Y', '6Y', '7Y', '7Y', '8Y', '8Y', '9Y', '9Y', 'skipY', 'skipY', '_Y', '_Y', 'D2Y', 'D2Y',\n    'W', 'W', 'W', 'W', 'D4W', 'D4W', 'D4W', 'D4W'\n]","/* eslint-disable default-case */\nimport React, { useEffect, useState } from 'react'\nimport PACK_OF_CARDS from '../utils/packOfCards'\nimport shuffleArray from '../utils/shuffleArray'\nimport io from 'socket.io-client'\nimport queryString from 'query-string'\nimport Spinner from './Spinner'\nimport useSound from 'use-sound'\n\nimport bgMusic from '../assets/sounds/game-bg-music.mp3'\nimport unoSound from '../assets/sounds/uno-sound.mp3'\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3'\nimport skipCardSound from '../assets/sounds/skip-sound.mp3'\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3'\nimport wildCardSound from '../assets/sounds/wild-sound.mp3'\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3'\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3'\n\nimport Button from '@mui/material/Button';\n\n\n//NUMBER CODES FOR ACTION CARDS\n//SKIP - 404\n//DRAW 2 - 252\n//WILD - 300\n//DRAW 4 WILD - 600\n\nlet socket\nconst ENDPOINT = 'http://localhost:5000'\n\nconst Game = (props) => {\n    const data = queryString.parse(props.location.search)\n\n    //initialize socket state\n    const [room, setRoom] = useState(data.roomCode)\n    const [roomFull, setRoomFull] = useState(false)\n    const [users, setUsers] = useState([])\n    const [currentUser, setCurrentUser] = useState('')\n    const [message, setMessage] = useState('')\n    const [messages, setMessages] = useState([])\n\n    useEffect(() => {\n        const connectionOptions =  {\n            \"forceNew\" : true,\n            \"reconnectionAttempts\": \"Infinity\", \n            \"timeout\" : 10000,                  \n            \"transports\" : [\"websocket\"]\n        }\n        socket = io.connect(ENDPOINT, connectionOptions)\n\n        socket.emit('join', {room: room}, (error) => {\n            if(error)\n                setRoomFull(true)\n        })\n\n        //cleanup on component unmount\n        return function cleanup() {\n            socket.emit('disconnect')\n            //shut down connnection instance\n            socket.off()\n        }\n    }, [])\n\n    //initialize game state\n    const [gameOver, setGameOver] = useState(true)\n    const [winner, setWinner] = useState('')\n    const [turn, setTurn] = useState('')\n    const [player1Deck, setPlayer1Deck] = useState([])\n    const [player2Deck, setPlayer2Deck] = useState([])\n    const [currentColor, setCurrentColor] = useState(false)\n    const [currentNumber, setCurrentNumber] = useState('')\n    const [playedCardsPile, setPlayedCardsPile] = useState([])\n    const [drawCardPile, setDrawCardPile] = useState([])\n\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\n    const [isSoundMuted, setSoundMuted] = useState(false)\n    const [isMusicMuted, setMusicMuted] = useState(true)\n\n    const [playBBgMusic, { pause }] = useSound(bgMusic, { loop: true })\n    const [playUnoSound] = useSound(unoSound)\n    const [playShufflingSound] = useSound(shufflingSound)\n    const [playSkipCardSound] = useSound(skipCardSound)\n    const [playDraw2CardSound] = useSound(draw2CardSound)\n    const [playWildCardSound] = useSound(wildCardSound)\n    const [playDraw4CardSound] = useSound(draw4CardSound)\n    const [playGameOverSound] = useSound(gameOverSound)\n\n    //runs once on component mount\n    useEffect(() => {\n        //shuffle PACK_OF_CARDS array\n        const shuffledCards = shuffleArray(PACK_OF_CARDS)\n\n        //extract first 7 elements to player1Deck\n        const player1Deck = shuffledCards.splice(0, 7)\n\n        //extract first 7 elements to player2Deck\n        const player2Deck = shuffledCards.splice(0, 7)\n\n        //extract random card from shuffledCards and check if its not an action card\n        let startingCardIndex\n        while(true) {\n            startingCardIndex = Math.floor(Math.random() * 94)\n            if(shuffledCards[startingCardIndex]==='skipR' || shuffledCards[startingCardIndex]==='_R' || shuffledCards[startingCardIndex]==='D2R' ||\n            shuffledCards[startingCardIndex]==='skipG' || shuffledCards[startingCardIndex]==='_G' || shuffledCards[startingCardIndex]==='D2G' ||\n            shuffledCards[startingCardIndex]==='skipB' || shuffledCards[startingCardIndex]==='_B' || shuffledCards[startingCardIndex]==='D2B' ||\n            shuffledCards[startingCardIndex]==='skipY' || shuffledCards[startingCardIndex]==='_Y' || shuffledCards[startingCardIndex]==='D2Y' ||\n            shuffledCards[startingCardIndex]==='W' || shuffledCards[startingCardIndex]==='D4W') {\n                continue;\n            }\n            else\n                break;\n        }\n\n        //extract the card from that startingCardIndex into the playedCardsPile\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1)\n\n        //store all remaining cards into drawCardPile\n        const drawCardPile = shuffledCards\n\n        //send initial state to server\n        socket.emit('initGameState', {\n            gameOver: false,\n            turn: 'Player 1',\n            player1Deck: [...player1Deck],\n            player2Deck: [...player2Deck],\n            currentColor: playedCardsPile[0].charAt(1),\n            currentNumber: playedCardsPile[0].charAt(0),\n            playedCardsPile: [...playedCardsPile],\n            drawCardPile: [...drawCardPile]\n        })\n    }, [])\n\n    useEffect(() => {\n        socket.on('initGameState', ({ gameOver, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\n            setGameOver(gameOver)\n            setTurn(turn)\n            setPlayer1Deck(player1Deck)\n            setPlayer2Deck(player2Deck)\n            setCurrentColor(currentColor)\n            setCurrentNumber(currentNumber)\n            setPlayedCardsPile(playedCardsPile)\n            setDrawCardPile(drawCardPile)\n        })\n\n        socket.on('updateGameState', ({ gameOver, winner, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\n            gameOver && setGameOver(gameOver)\n            gameOver===true && playGameOverSound()\n            winner && setWinner(winner)\n            turn && setTurn(turn)\n            player1Deck && setPlayer1Deck(player1Deck)\n            player2Deck && setPlayer2Deck(player2Deck)\n            currentColor && setCurrentColor(currentColor)\n            currentNumber && setCurrentNumber(currentNumber)\n            playedCardsPile && setPlayedCardsPile(playedCardsPile)\n            drawCardPile && setDrawCardPile(drawCardPile)\n            setUnoButtonPressed(false)\n        })\n\n        socket.on(\"roomData\", ({ users }) => {\n            setUsers(users)\n        })\n\n        socket.on('currentUserData', ({ name }) => {\n            setCurrentUser(name)\n        })\n\n        socket.on('message', message => {\n            setMessages(messages => [ ...messages, message ])\n\n            const chatBody = document.querySelector('.chat-body')\n            chatBody.scrollTop = chatBody.scrollHeight\n        })\n    }, [])\n\n    //some util functions\n    const checkGameOver = (arr) => {\n        return arr.length === 1\n    }\n    \n    const checkWinner = (arr, player) => {\n        return arr.length === 1 ? player : ''\n    }\n\n    const toggleChatBox = () => {\n        const chatBody = document.querySelector('.chat-body')\n        if(isChatBoxHidden) {\n            chatBody.style.display = 'block'\n            setChatBoxHidden(false)\n        }\n        else {\n            chatBody.style.display = 'none'\n            setChatBoxHidden(true)\n        }\n    }\n\n    const sendMessage= (event) => {\n        event.preventDefault()\n        if(message) {\n            socket.emit('sendMessage', { message: message }, () => {\n                setMessage('')\n            })\n        }\n    }\n\n    //driver functions\n    const onCardPlayedHandler = (played_card) => {\n        //extract player who played the card\n        const cardPlayedBy = turn\n        switch(played_card) {\n            //if card played was a number card\n            case '0R': case '1R': case '2R': case '3R': case '4R': case '5R': case '6R': case '7R': case '8R': case '9R': case '_R': case '0G': case '1G': case '2G': case '3G': case '4G': case '5G': case '6G': case '7G': case '8G': case '9G': case '_G': case '0B': case '1B': case '2B': case '3B': case '4B': case '5B': case '6B': case '7B': case '8B': case '9B': case '_B': case '0Y': case '1Y': case '2Y': case '3Y': case '4Y': case '5Y': case '6Y': case '7Y': case '8Y': case '9Y': case '_Y': {\n                //extract number and color of played card\n                const numberOfPlayedCard = played_card.charAt(0)\n                const colorOfPlayedCard = played_card.charAt(1)\n                //check for color match\n                if(currentColor === colorOfPlayedCard) {\n                    console.log('colors matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                }\n                //check for number match\n                else if(currentNumber === numberOfPlayedCard) {\n                    console.log('numbers matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert('Invalid Move!')\n                }\n                break;\n            }\n            //if card played was a skip card\n            case 'skipR': case 'skipG': case 'skipB': case 'skipY': {\n                //extract color of played skip card\n                const colorOfPlayedCard = played_card.charAt(4)\n                //check for color match\n                if(currentColor === colorOfPlayedCard) {\n                    console.log('colors matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                }\n                //check for number match - if skip card played on skip card\n                else if(currentNumber === 404) {\n                    console.log('Numbers matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert('Invalid Move!')\n                }\n                break;\n            }\n            //if card played was a draw 2 card\n            case 'D2R': case 'D2G': case 'D2B': case 'D2Y': {\n                //extract color of played skip card\n                const colorOfPlayedCard = played_card.charAt(2)\n                //check for color match\n                if(currentColor === colorOfPlayedCard) {\n                    console.log('colors matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1X)\n                            updatedPlayer1Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1X)\n                            updatedPlayer2Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                }\n                //check for number match - if draw 2 card played on draw 2 card\n                else if(currentNumber === 252) {                        \n                    console.log('number matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1X)\n                            updatedPlayer1Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1X)\n                            updatedPlayer2Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert('Invalid Move!')\n                }\n                break;\n            }\n            //if card played was a wild card\n            case 'W': {\n                //check who played the card and return new state accordingly\n                if(cardPlayedBy === 'Player 1') {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player1Deck.indexOf(played_card)\n                    //then update turn, currentColor and currentNumber\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                        updatedPlayer1Deck.push(drawCard1)\n                        updatedPlayer1Deck.push(drawCard2)\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            turn: 'Player 2',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...updatedPlayer1Deck],\n                            currentColor: newColor,\n                            currentNumber: 300,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            turn: 'Player 2',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                            currentColor: newColor,\n                            currentNumber: 300\n                        })\n                    }\n                }\n                else {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player2Deck.indexOf(played_card)\n                    //then update turn, currentColor and currentNumber\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                        updatedPlayer2Deck.push(drawCard1)\n                        updatedPlayer2Deck.push(drawCard2)\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            turn: 'Player 1',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...updatedPlayer2Deck],\n                            currentColor: newColor,\n                            currentNumber: 300,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            turn: 'Player 1',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                            currentColor: newColor,\n                            currentNumber: 300\n                        })\n                    }\n                }\n                break;\n            }\n            //if card played was a draw four wild card\n            case 'D4W': {\n                const newLocal = cardPlayedBy === 'Player 1' // for eslint to stop complaining\n                //check who played the card and return new state accordingly\n                if(newLocal) {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player1Deck.indexOf(played_card)\n                    //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                    //make a copy of drawCardPile array\n                    const copiedDrawCardPileArray = [...drawCardPile]\n                    //pull out last four elements from it\n                    const drawCard1 = copiedDrawCardPileArray.pop()\n                    const drawCard2 = copiedDrawCardPileArray.pop()\n                    const drawCard3 = copiedDrawCardPileArray.pop()\n                    const drawCard4 = copiedDrawCardPileArray.pop()\n                    //then update currentColor and currentNumber - turn will remain same\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //pull out last two elements from drawCardPile\n                        const drawCard1X = copiedDrawCardPileArray.pop()\n                        const drawCard2X = copiedDrawCardPileArray.pop()\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                        updatedPlayer1Deck.push(drawCard1X)\n                        updatedPlayer1Deck.push(drawCard2X)\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...updatedPlayer1Deck],\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                }\n                else {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player2Deck.indexOf(played_card)\n                    //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                    //make a copy of drawCardPile array\n                    const copiedDrawCardPileArray = [...drawCardPile]\n                    //pull out last four elements from it\n                    const drawCard1 = copiedDrawCardPileArray.pop()\n                    const drawCard2 = copiedDrawCardPileArray.pop()\n                    const drawCard3 = copiedDrawCardPileArray.pop()\n                    const drawCard4 = copiedDrawCardPileArray.pop()\n                    //then update currentColor and currentNumber - turn will remain same\n                    !isSoundMuted && playDraw4CardSound()\n                    //send new state to server\n                    socket.emit('updateGameState', {\n                        gameOver: checkGameOver(player2Deck),\n                        winner: checkWinner(player2Deck, 'Player 2'),\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                        player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                        player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                        currentColor: newColor,\n                        currentNumber: 600,\n                        drawCardPile: [...copiedDrawCardPileArray]\n                    })\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //pull out last two elements from drawCardPile\n                        const drawCard1X = copiedDrawCardPileArray.pop()\n                        const drawCard2X = copiedDrawCardPileArray.pop()\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                        updatedPlayer2Deck.push(drawCard1X)\n                        updatedPlayer2Deck.push(drawCard2X)\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...updatedPlayer2Deck],\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                }\n            }\n            break;\n        }\n    }\n    \n    const onCardDrawnHandler = () => {\n        //extract player who drew the card\n        const cardDrawnBy = turn\n        //check who drew the card and return new state accordingly\n        if(cardDrawnBy === 'Player 1') {\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\n            //make a copy of drawCardPile array\n            const copiedDrawCardPileArray = [...drawCardPile]\n            //pull out last element from it\n            const drawCard = copiedDrawCardPileArray.pop()\n            //extract number and color of drawn card\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\n            let numberOfDrawnCard = drawCard.charAt(0)\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 404,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw2CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                !isSoundMuted && playWildCardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 2',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: newColor,\n                    currentNumber: 300,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'D4W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last four elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                const drawCard3 = copiedDrawCardPileArray.pop()\n                const drawCard4 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw4CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                    currentColor: newColor,\n                    currentNumber: 600,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //if not action card - check if drawn card is playable\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 2',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: numberOfDrawnCard,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //else add the drawn card to player1's deck\n            else {\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 2',\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n        }\n        else {\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\n            //make a copy of drawCardPile array\n            const copiedDrawCardPileArray = [...drawCardPile]\n            //pull out last element from it\n            const drawCard = copiedDrawCardPileArray.pop()\n            //extract number and color of drawn card\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\n            let numberOfDrawnCard = drawCard.charAt(0)\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 404,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw2CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                !isSoundMuted && playWildCardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 1',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: newColor,\n                    currentNumber: 300,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'D4W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last four elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                const drawCard3 = copiedDrawCardPileArray.pop()\n                const drawCard4 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw4CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                    currentColor: newColor,\n                    currentNumber: 600,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //if not action card - check if drawn card is playable\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 1',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: numberOfDrawnCard,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //else add the drawn card to player2's deck\n            else {\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 1',\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n        }\n    }\n    return (\n        <div className={`Game`}>\n            <div className={`background backgroundColor${currentColor}`}></div>\n            {(!roomFull) ? <>\n\n                <div className='topInfo'>\n                    <img src={require('../assets/logo.png').default} alt='' />\n                    <h1>Game Code: {room}</h1>\n                    <span>\n                        <button className='game-button green' onClick={() => setSoundMuted(!isSoundMuted)}>{isSoundMuted ? <span className=\"material-icons\">volume_off</span> : <span className=\"material-icons\">volume_up</span>}</button>\n                        <button className='game-button green' onClick={() => {\n                            if(isMusicMuted)\n                                playBBgMusic()\n                            else\n                                pause()\n                            setMusicMuted(!isMusicMuted)\n                        }}>{isMusicMuted ? <span className=\"material-icons\">music_off</span> : <span className=\"material-icons\">music_note</span>}</button>\n                    </span>\n                </div>\n\n                {/* PLAYER LEFT MESSAGES */}\n                {users.length===1 && currentUser === 'Player 2' && <h1 className='topInfoText'>Player 1 has left the game.</h1> }\n                {users.length===1 && currentUser === 'Player 1' && <h1 className='topInfoText'>Waiting for Player 2 to join the game...</h1> }\n\n                {users.length===2 && <>\n\n                    {gameOver ? <div>{winner !== '' && <><h1>Game Over</h1><h2>{winner} wins!</h2></>}</div> :\n                    <div>\n                        {/* PLAYER 1 VIEW */}\n                        {currentUser === 'Player 1' && <>    \n                        <div className='player2Deck' style={{pointerEvents: 'none'}}>\n                            <p className='playerDeckText'>Player 2</p>\n                            {player2Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/card-back.png`).default}\n                                    alt=''\n                                    />\n                            ))}\n                            {turn==='Player 2' && <Spinner />}\n                        </div>\n                        <br />\n                        <div className='middleInfo' style={turn === 'Player 2' ? {pointerEvents: 'none'} : null}>\n                            <button className='game-button' disabled={turn !== 'Player 1'} onClick={onCardDrawnHandler}>DRAW CARD</button>\n                            {playedCardsPile && playedCardsPile.length>0 &&\n                            <img\n                                className='Card'\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\n                                alt=''\n                                /> }\n                            <button className='game-button orange' disabled={player1Deck.length !== 2} onClick={() => {\n                                setUnoButtonPressed(!isUnoButtonPressed)\n                                playUnoSound()\n                            }}>UNO</button>\n                        </div>\n                        <br />\n                        <div className='player1Deck' style={turn === 'Player 1' ? null : {pointerEvents: 'none'}}>\n                            <p className='playerDeckText'>Player 1</p>\n                            {player1Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/cards-front/${item}.png`).default}\n                                    alt=''\n                                    />\n                            ))}\n                        </div>\n\n                        <div className=\"chatBoxWrapper\">\n                            <div className=\"chat-box chat-box-player1\">\n                                <div className=\"chat-head\">\n                                    <h2>Chat Box</h2>\n                                    {!isChatBoxHidden ?\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\n                                </div>\n                                <div className=\"chat-body\">\n                                    <div className=\"msg-insert\">\n                                        {messages.map(msg => {\n                                            if(msg.user === 'Player 2')\n                                                return <div className=\"msg-receive\">{msg.text}</div>\n                                            if(msg.user === 'Player 1')\n                                                return <div className=\"msg-send\">{msg.text}</div>\n                                        })}\n                                    </div>\n                                    <div className=\"chat-text\">\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div> </> }\n\n                        {/* PLAYER 2 VIEW */}\n                        {currentUser === 'Player 2' && <>\n                        <div className='player1Deck' style={{pointerEvents: 'none'}}>\n                            <p className='playerDeckText'>Player 1</p>\n                            {player1Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/card-back.png`).default}\n                                    alt=''\n                                    />\n                            ))}\n                            {turn==='Player 1' && <Spinner />}\n                        </div>\n                        <br />\n                        <div className='middleInfo' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\n                            <button className='game-button' disabled={turn !== 'Player 2'} onClick={onCardDrawnHandler}>DRAW CARD</button>\n                            {playedCardsPile && playedCardsPile.length>0 &&\n                            <img\n                                className='Card'\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\n                                alt=''\n                                /> }\n                            <button className='game-button orange' disabled={player2Deck.length !== 2} onClick={() => {\n                                setUnoButtonPressed(!isUnoButtonPressed)\n                                playUnoSound()\n                            }}>UNO</button>\n                        </div>\n                        <br />\n                        <div className='player2Deck' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\n                            <p className='playerDeckText'>Player 2</p>\n                            {player2Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/cards-front/${item}.png`).default}\n                                    alt=''\n                                    />\n                            ))}\n                        </div>\n\n                        <div className=\"chatBoxWrapper\">\n                            <div className=\"chat-box chat-box-player2\">\n                                <div className=\"chat-head\">\n                                    <h2>Chat Box</h2>\n                                    {!isChatBoxHidden ?\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\n                                </div>\n                                <div className=\"chat-body\">\n                                    <div className=\"msg-insert\">\n                                        {messages.map(msg => {\n                                            if(msg.user === 'Player 1')\n                                                return <div className=\"msg-receive\">{msg.text}</div>\n                                            if(msg.user === 'Player 2')\n                                                return <div className=\"msg-send\">{msg.text}</div>\n                                            return false\n                                        })}\n                                    </div>\n                                    <div className=\"chat-text\">\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div> </> }\n                    </div> }\n                </> }\n            </> : <h1>Room full</h1> }\n\n            <br />\n            <a href='/'><Button variant=\"contained\" className=\"btn\">Quit</Button></a>\n        </div>\n    )\n}\n\nexport default Game","import React from 'react'\n\nconst Spinner = () => {\n    return (\n        <div className=\"loader\">Loading...</div>\n    )\n}\n\nexport default Spinner","export default __webpack_public_path__ + \"static/media/game-bg-music.23bf1040.mp3\";","export default __webpack_public_path__ + \"static/media/uno-sound.5d88cef2.mp3\";","export default __webpack_public_path__ + \"static/media/shuffling-cards-1.30ba20ce.mp3\";","export default __webpack_public_path__ + \"static/media/skip-sound.53beaf85.mp3\";","export default __webpack_public_path__ + \"static/media/draw2-sound.be4696c7.mp3\";","export default __webpack_public_path__ + \"static/media/wild-sound.5768fa67.mp3\";","export default __webpack_public_path__ + \"static/media/draw4-sound.b3adc159.mp3\";","export default __webpack_public_path__ + \"static/media/game-over-sound.088c8180.mp3\";","export default function shuffleArray(array) { \n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1))\n        var temp = array[i]\n        array[i] = array[j]\n        array[j] = temp;\n    }   \n    return array\n}","import './App.css'\nimport { Route } from 'react-router-dom'\nimport Homepage from './components/Homepage'\nimport Game from './components/Game'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Route path='/' exact component={Homepage} />\n      <Route path='/play' exact component={Game} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}